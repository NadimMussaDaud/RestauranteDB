/*
DISCLAIMER : UTILIZAÇÃO DE IA

Foi utilizada IA em algum dos triggers, uma vez que a sua estrutura era muit similar. Ex: Impor restrições de ISA's
Foi utilizada IA para a realização das inserções
Na realização de algumas funções

*/

DROP TABLE RESTAURANTES CASCADE CONSTRAINTS;
DROP TABLE INVENTARIO CASCADE CONSTRAINTS;
DROP TABLE MORADA CASCADE CONSTRAINTS;
DROP TABLE MOBILIA_MATERIAIS CASCADE CONSTRAINTS;
DROP TABLE PESSOAS CASCADE CONSTRAINTS;
DROP TABLE FUNCIONARIOS CASCADE CONSTRAINTS;
DROP TABLE FORNECEDORES CASCADE CONSTRAINTS;
DROP TABLE DIRECAO CASCADE CONSTRAINTS;
DROP TABLE CHEF CASCADE CONSTRAINTS;
DROP TABLE CONTACTOS CASCADE CONSTRAINTS;
DROP TABLE PEDIDOS CASCADE CONSTRAINTS;
DROP TABLE CARDAPIO CASCADE CONSTRAINTS;
DROP TABLE INGREDIENTES CASCADE CONSTRAINTS;
DROP TABLE ITEM CASCADE CONSTRAINTS;
DROP TABLE PRATO CASCADE CONSTRAINTS;
DROP TABLE BEBIDA CASCADE CONSTRAINTS;
DROP TABLE STOCK CASCADE CONSTRAINTS;

DROP TABLE ENCOMENDA CASCADE CONSTRAINTS;
DROP TABLE FREQUENTAM CASCADE CONSTRAINTS;
DROP TABLE CARTAS CASCADE CONSTRAINTS;
DROP TABLE GERE CASCADE CONSTRAINTS;
DROP TABLE FORNECE CASCADE CONSTRAINTS;
DROP TABLE CONSTITUICAO CASCADE CONSTRAINTS;
DROP SEQUENCE codigo_bens;
DROP SEQUENCE codigo_ingredientes;
DROP SEQUENCE numero_pedido;


CREATE TABLE MORADA (
    CP INT PRIMARY KEY,
    LOCALIDADE VARCHAR(100)
);

CREATE TABLE RESTAURANTES (
    NUMEROCADEIA INT CHECK(NUMEROCADEIA > 0),
    NOMERESTAURANTE VARCHAR(100) UNIQUE NOT NULL,
    HORAABERTURA VARCHAR(10) NOT NULL ,
    HORAFECHO VARCHAR(10) NOT NULL ,
    LUGARES INT CHECK(LUGARES > 40) NOT NULL,
    CP INT,
    PRIMARY KEY (NUMEROCADEIA, CP),
    FOREIGN KEY (CP) REFERENCES MORADA(CP) ON DELETE CASCADE,
    CONSTRAINT check_opening_time CHECK(HORAFECHO > HORAABERTURA)
);


CREATE TABLE MOBILIA_MATERIAIS (
    CODIGOBENS INT PRIMARY KEY,
    NOMEBENS VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE PESSOAS (
    NOMEPESSOA VARCHAR(100) UNIQUE NOT NULL,
    NIF VARCHAR(20) UNIQUE,
    CC VARCHAR(20) PRIMARY KEY,
    EMAIL VARCHAR(100) UNIQUE
);

CREATE TABLE FUNCIONARIOS (
    CC VARCHAR(20),
    SALARIO DECIMAL(6,2),
    PRIMARY KEY (CC),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC) ON DELETE CASCADE
);

CREATE TABLE FORNECEDORES (
    CC VARCHAR(20),
    NUMEROCONTA VARCHAR(50) UNIQUE NOT NULL,
    PRIMARY KEY (CC),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC) ON DELETE CASCADE
);

CREATE TABLE DIRECAO (
    CC VARCHAR(20),
    BONUS DECIMAL(10, 2) NOT NULL CHECK(BONUS >= 0),
    PRIMARY KEY (CC),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC) ON DELETE CASCADE
);

CREATE TABLE CHEF (
    CC VARCHAR(20) ,
    ESTRELAS INT CHECK(ESTRELAS >= 0),
    PRIMARY KEY (CC),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC) ON DELETE CASCADE
);

CREATE TABLE CONTACTOS (
    CC VARCHAR(20),
    NUMEROTELEFONE VARCHAR(15) UNIQUE, --Duas pessoas não podem ter o mesmo número
    PRIMARY KEY (CC, NUMEROTELEFONE),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC) ON DELETE CASCADE
);

CREATE TABLE PEDIDOS (
    NUMEROPEDIDO INT PRIMARY KEY,
    HORA VARCHAR(10) , 
    TEMPO_TERMINO VARCHAR(10) NOT NULL,
    NUMEROCLIENTES INT NOT NULL,
    CP INT,
    NUMEROCADEIA INT,
    CC VARCHAR(20),
    FOREIGN KEY (CP) REFERENCES MORADA ON DELETE CASCADE,
    FOREIGN KEY (NUMEROCADEIA, CP) REFERENCES RESTAURANTES ON DELETE CASCADE,
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC) ON DELETE CASCADE
);

CREATE TABLE CARDAPIO (
    EPOCA VARCHAR(10) PRIMARY KEY  CHECK (EPOCA IN ('Verão', 'Inverno', 'Primavera', 'Outono')),
    NOMECARDAPIO VARCHAR(100) -- Pode não ter nome o cardápio --
);


CREATE TABLE INGREDIENTES (
    CODIGOINGREDIENTES INT PRIMARY KEY,
    NOME VARCHAR(100) UNIQUE NOT NULL,
    PROVENIENCIA VARCHAR(100),
    DATAVALIDADE DATE NOT NULL,
    PRECO DECIMAL(10, 2) CHECK (PRECO > 0)
);


CREATE TABLE ITEM (
    NOMEITEM VARCHAR(100) PRIMARY KEY,
    EPOCA VARCHAR(10) CHECK (EPOCA IN ('Verão', 'Inverno', 'Primavera', 'Outono')),
    DESCRICAO VARCHAR(255) NOT NULL,
    PRECO DECIMAL(10, 2) CHECK (PRECO > 0.0),
    FOREIGN KEY (EPOCA) REFERENCES CARDAPIO(EPOCA) ON DELETE CASCADE
);


CREATE TABLE PRATO (
    NOMEITEM VARCHAR(100),
    TIPO VARCHAR(50) CHECK (TIPO IN ('Principal', 'Entrada', 'Sobremesa')),
    FOREIGN KEY (NOMEITEM)  REFERENCES ITEM(NOMEITEM) ON DELETE CASCADE
);

CREATE TABLE BEBIDA (
    NOMEITEM VARCHAR(100),
    TEORALCOOL DECIMAL(5, 2) CHECK (TEORALCOOL >= 0), 
    FOREIGN KEY (NOMEITEM) REFERENCES ITEM(NOMEITEM) ON DELETE CASCADE
);

CREATE TABLE STOCK (
    CODIGOINGREDIENTES INT,
    NUMEROCADEIA INT,
    CP INT,
    QUANTIDADE_STOCK INT CHECK (QUANTIDADE_STOCK >= 0),
    PRIMARY KEY (CODIGOINGREDIENTES, NUMEROCADEIA, CP),
    FOREIGN KEY (CODIGOINGREDIENTES) REFERENCES INGREDIENTES(CODIGOINGREDIENTES) ON DELETE CASCADE,
    FOREIGN KEY (NUMEROCADEIA,CP) REFERENCES RESTAURANTES(NUMEROCADEIA,CP) ON DELETE CASCADE
);

CREATE TABLE INVENTARIO (
    NUMEROCADEIA INT,
    CP INT,
    CODIGOBENS INT,
    QUANTIDADE_INVENTARIO INT CHECK( QUANTIDADE_INVENTARIO >= 0),
    PRIMARY KEY (NUMEROCADEIA, CP, CODIGOBENS),
    FOREIGN KEY (NUMEROCADEIA, CP) REFERENCES RESTAURANTES(NUMEROCADEIA, CP) ON DELETE CASCADE,
    FOREIGN KEY (CODIGOBENS) REFERENCES MOBILIA_MATERIAIS(CODIGOBENS) ON DELETE CASCADE
);

CREATE TABLE FREQUENTAM (
    CC VARCHAR(20),
    NUMEROCADEIA INT,
    CP INT,
    PRIMARY KEY (CC, NUMEROCADEIA, CP),
    FOREIGN KEY (CP) REFERENCES MORADA(CP),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC) ON DELETE CASCADE,
    FOREIGN KEY (NUMEROCADEIA,CP) REFERENCES RESTAURANTES(NUMEROCADEIA, CP) ON DELETE CASCADE
);

CREATE TABLE CARTAS (
    EPOCA VARCHAR(50),
    NUMEROCADEIA INT,
    CP INT,
    PRIMARY KEY (EPOCA, NUMEROCADEIA, CP),
    FOREIGN KEY (NUMEROCADEIA, CP) REFERENCES RESTAURANTES(NUMEROCADEIA, CP) ON DELETE CASCADE,
    FOREIGN KEY (EPOCA) REFERENCES CARDAPIO(EPOCA) ON DELETE CASCADE
);

CREATE TABLE GERE (
    CC VARCHAR(20),
    DIRECAO_CC VARCHAR(20),
    PRIMARY KEY (CC),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC) ON DELETE CASCADE,
    FOREIGN KEY (DIRECAO_CC) REFERENCES PESSOAS(CC) ON DELETE CASCADE

);

CREATE TABLE FORNECE (
    CC VARCHAR(20),
    CODIGOINGREDIENTES INT,
    PRIMARY KEY (CC, CODIGOINGREDIENTES),
    FOREIGN KEY (CC) REFERENCES FORNECEDORES(CC) ON DELETE CASCADE,
    FOREIGN KEY (CODIGOINGREDIENTES) REFERENCES INGREDIENTES(CODIGOINGREDIENTES) ON DELETE CASCADE
);

CREATE TABLE ENCOMENDA (
    NUMEROPEDIDO INT,
    NOMEITEM VARCHAR(100),
    QUANTIDADEENCOMENDA INT CHECK (QUANTIDADEENCOMENDA >= 0) NOT NULL,
    PRIMARY KEY (NUMEROPEDIDO, NOMEITEM),
    FOREIGN KEY (NUMEROPEDIDO) REFERENCES PEDIDOS(NUMEROPEDIDO) ON DELETE CASCADE,
    FOREIGN KEY (NOMEITEM) REFERENCES ITEM(NOMEITEM) ON DELETE CASCADE
);

CREATE TABLE CONSTITUICAO (
    CODIGOINGREDIENTES INT,
    NOMEITEM VARCHAR(100),
    QUANTIDADECONST INT CHECK (QUANTIDADECONST > 0),
    PRIMARY KEY (CODIGOINGREDIENTES, NOMEITEM),
    FOREIGN KEY (CODIGOINGREDIENTES) REFERENCES INGREDIENTES(CODIGOINGREDIENTES) ON DELETE CASCADE,
    FOREIGN KEY (NOMEITEM) REFERENCES ITEM(NOMEITEM) ON DELETE CASCADE
);

CREATE SEQUENCE codigo_bens START WITH 10000 INCREMENT BY 1;
CREATE SEQUENCE codigo_ingredientes START WITH 10000 INCREMENT BY 1;
CREATE SEQUENCE numero_pedido START WITH 1 INCREMENT BY 1;

--SEQUENCES TRIGGERS--
CREATE OR REPLACE TRIGGER trg_before_insert_pedidos
BEFORE INSERT ON PEDIDOS
FOR EACH ROW
BEGIN
    IF :NEW.NUMEROPEDIDO IS NULL THEN
        :NEW.NUMEROPEDIDO := numero_pedido.NEXTVAL;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_before_insert_ingredientes
BEFORE INSERT ON INGREDIENTES
FOR EACH ROW
BEGIN
    IF :NEW.CODIGOINGREDIENTES IS NULL THEN
        :NEW.CODIGOINGREDIENTES := codigo_ingredientes.NEXTVAL;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_before_insert_bens
BEFORE INSERT ON MOBILIA_MATERIAIS
FOR EACH ROW
BEGIN
    IF :NEW.CODIGOBENS IS NULL THEN
        :NEW.CODIGOBENS := codigo_bens.NEXTVAL;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER check_funcionarios_in_restaurant
BEFORE INSERT ON PEDIDOS
FOR EACH ROW
DECLARE
    funcionarios_total INT;
BEGIN
    SELECT COUNT(*) INTO funcionarios_total
    FROM FREQUENTAM fr JOIN FUNCIONARIOS f ON fr.CC = f.CC
    WHERE fr.NUMEROCADEIA = :NEW.NUMEROCADEIA AND fr.CP = :NEW.CP;

    IF funcionarios_total = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Neste Restaurante não há funcionários');
    END IF;
END;
/

--Ignora pedidos que já passaram
CREATE OR REPLACE FUNCTION get_restaurant_capacity(
    num_cadeia IN PEDIDOS.NUMEROCADEIA%TYPE,
    c_postal IN PEDIDOS.CP%TYPE
) RETURN INT IS
    capacity_left INT;
    total_capacity INT;
    total_clients INT;
BEGIN
    SELECT COALESCE(SUM(p.NUMEROCLIENTES),0) -- COALESCE certifica que seja 0 se for null a consulta
    INTO total_clients
    FROM PEDIDOS p
    WHERE p.NUMEROCADEIA = num_cadeia AND p.CP = c_postal AND p.TEMPO_TERMINO > TO_CHAR(SYSDATE, 'HH24:MI');

    SELECT r.LUGARES
    INTO total_capacity
    FROM RESTAURANTES r
    WHERE r.NUMEROCADEIA = num_cadeia AND r.CP = c_postal;
    
    capacity_left := total_capacity - total_clients;

    RETURN capacity_left;

END;
/

CREATE OR REPLACE TRIGGER check_capacity
BEFORE INSERT ON PEDIDOS
FOR EACH ROW
DECLARE
    capacity INT;
BEGIN
    capacity := get_restaurant_capacity(:NEW.NUMEROCADEIA, :NEW.CP);
    IF :NEW.NUMEROCLIENTES > capacity THEN
        RAISE_APPLICATION_ERROR(-20001, 'Não ha mais lugares no restaurante.');
    END IF;
END;
/

CREATE OR REPLACE FUNCTION check_expiration_date_over(
    enc_nomeItem IN ENCOMENDA.NOMEITEM%TYPE
) RETURN BOOLEAN IS
    v_count INT;
BEGIN 
    SELECT COUNT(*)
    INTO v_count
    FROM CONSTITUICAO c 
    JOIN INGREDIENTES i on i.CODIGOINGREDIENTES = c.CODIGOINGREDIENTES
    WHERE c.NOMEITEM = enc_nomeItem AND i.DATAVALIDADE < SYSDATE;

    IF v_count > 0 THEN
        RETURN FALSE;
    ELSE 
        RETURN TRUE;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER validate_item_order
BEFORE INSERT ON ENCOMENDA
FOR EACH ROW
DECLARE
    is_valid BOOLEAN;
BEGIN
    is_valid := check_expiration_date_over(:NEW.NOMEITEM);

    IF NOT is_valid THEN
        RAISE_APPLICATION_ERROR(-20001, 'Item não possível.Ingredientes estão fora do prazo.');
    END IF;
END;
/




-- Verifica se está dentro do periodo de operação do restaurante --
CREATE OR REPLACE FUNCTION check_order_time(
    p_numeroCadeia IN PEDIDOS.NUMEROCADEIA%TYPE,
    p_hora        IN PEDIDOS.HORA%TYPE,
    p_termino     IN PEDIDOS.TEMPO_TERMINO%TYPE
) RETURN BOOLEAN IS
    v_horaAbertura RESTAURANTES.HORAABERTURA%TYPE;
    v_horaFecho    RESTAURANTES.HORAFECHO%TYPE;
BEGIN
    SELECT HORAABERTURA, HORAFECHO INTO v_horaAbertura, v_horaFecho
    FROM RESTAURANTES
    WHERE NUMEROCADEIA = p_numeroCadeia;

    IF p_hora > v_horaAbertura AND p_termino < v_horaFecho THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;
/



CREATE OR REPLACE TRIGGER trg_check_order_time
BEFORE INSERT OR UPDATE ON PEDIDOS
FOR EACH ROW
DECLARE
    v_is_valid BOOLEAN;
BEGIN
    v_is_valid := check_order_time(:NEW.NUMEROCADEIA, :NEW.HORA, :NEW.TEMPO_TERMINO);
    IF NOT v_is_valid THEN
        RAISE_APPLICATION_ERROR(-20001, 'Hora do pedido está fora do intervalo de operação do restaurante.');
    END IF;
END;
/


CREATE OR REPLACE FUNCTION calcular_custo_prato(p_nomeitem IN PRATO.NOMEITEM%TYPE)
RETURN NUMBER
IS
    v_custo_total NUMBER := 0;
BEGIN
    SELECT SUM(i.PRECO * c.QUANTIDADECONST)
    INTO v_custo_total
    FROM CONSTITUICAO c
    JOIN INGREDIENTES i ON c.CODIGOINGREDIENTES = i.CODIGOINGREDIENTES
    WHERE c.NOMEITEM = p_nomeitem;
    
    RETURN v_custo_total;
END;
/


CREATE OR REPLACE FUNCTION ingredientes_em_falta(p_numerocadeia IN RESTAURANTES.NUMEROCADEIA%TYPE, p_cp IN RESTAURANTES.CP%TYPE)
RETURN SYS_REFCURSOR
IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
        SELECT i.NOME
        FROM INGREDIENTES i
        LEFT JOIN STOCK s ON i.CODIGOINGREDIENTES = s.CODIGOINGREDIENTES AND s.NUMEROCADEIA = p_numerocadeia AND s.CP = p_cp
        WHERE s.CODIGOINGREDIENTES IS NULL OR s.QUANTIDADE_STOCK = 0;
    
    RETURN v_cursor;
END;
/

CREATE OR REPLACE FUNCTION mesas_disponiveis(p_numerocadeia IN RESTAURANTES.NUMEROCADEIA%TYPE, p_cp IN RESTAURANTES.CP%TYPE)
RETURN SYS_REFCURSOR
IS
    v_cursor SYS_REFCURSOR;
    v_lugares_ocupados NUMBER;
    v_lugares_totais NUMBER;
BEGIN
    SELECT COUNT(DISTINCT cc) INTO v_lugares_ocupados
    FROM FREQUENTAM
    WHERE NUMEROCADEIA = p_numerocadeia AND CP = p_cp;
    
    SELECT LUGARES INTO v_lugares_totais
    FROM RESTAURANTES
    WHERE NUMEROCADEIA = p_numerocadeia AND CP = p_cp;
    
    OPEN v_cursor FOR
        SELECT v_lugares_totais - v_lugares_ocupados AS mesas_disponiveis FROM DUAL;
    
    RETURN v_cursor;
END;
/

CREATE OR REPLACE FUNCTION calcular_valor_encomenda(p_numeropedido IN ENCOMENDA.NUMEROPEDIDO%TYPE)
RETURN NUMBER
IS
    v_valor_total NUMBER := 0;
BEGIN
    SELECT SUM(i.PRECO * e.QUANTIDADEENCOMENDA)
    INTO v_valor_total
    FROM ENCOMENDA e
    JOIN ITEM i ON e.NOMEITEM = i.NOMEITEM
    WHERE e.NUMEROPEDIDO = p_numeropedido
    GROUP BY e.NUMEROPEDIDO;
    
    RETURN v_valor_total;
END;
/

CREATE OR REPLACE TRIGGER gerido_por_director
BEFORE INSERT ON GERE
FOR EACH ROW
DECLARE
    num_director INT;
BEGIN
    SELECT COUNT(*)
    INTO num_director
    FROM DIRECAO d
    WHERE d.CC = :NEW.DIRECAO_CC;

    IF num_director = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Apenas directores podem gerir alguém.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER verify_stock_before_order
BEFORE INSERT ON PEDIDOS
FOR EACH ROW
DECLARE
    v_quantidade_necessaria INT;
BEGIN
    FOR encomenda IN (
        SELECT e.NOMEITEM, e.QUANTIDADEENCOMENDA, c.CODIGOINGREDIENTES, c.QUANTIDADECONST, s.QUANTIDADE_STOCK
        FROM ENCOMENDA e
        JOIN CONSTITUICAO c ON e.NOMEITEM = c.NOMEITEM
        JOIN STOCK s ON c.CODIGOINGREDIENTES = s.CODIGOINGREDIENTES
        AND s.NUMEROCADEIA = :NEW.NUMEROCADEIA
        AND s.CP = :NEW.CP 
        WHERE e.NUMEROPEDIDO = :NEW.NUMEROPEDIDO
    ) LOOP
        v_quantidade_necessaria := encomenda.QUANTIDADEENCOMENDA * encomenda.QUANTIDADECONST;


        IF encomenda.QUANTIDADE_STOCK < v_quantidade_necessaria THEN
            RAISE_APPLICATION_ERROR(-20001, 'Stock insuficiente para o ingrediente: ' || encomenda.CODIGOINGREDIENTES);
        END IF;
    END LOOP;
END;
/



CREATE OR REPLACE TRIGGER update_stock_after_order
AFTER INSERT ON PEDIDOS
FOR EACH ROW
BEGIN
    FOR encomenda IN (
        SELECT e.NOMEITEM, e.QUANTIDADEENCOMENDA, c.CODIGOINGREDIENTES, c.QUANTIDADECONST
        FROM ENCOMENDA e
        JOIN CONSTITUICAO c ON e.NOMEITEM = c.NOMEITEM
        WHERE e.NUMEROPEDIDO = :NEW.NUMEROPEDIDO
    ) LOOP
        UPDATE STOCK s
        SET s.QUANTIDADE_STOCK = s.QUANTIDADE_STOCK - (encomenda.QUANTIDADECONST * encomenda.QUANTIDADEENCOMENDA)
        WHERE s.CODIGOINGREDIENTES = encomenda.CODIGOINGREDIENTES
            AND s.NUMEROCADEIA = :NEW.NUMEROCADEIA
            AND s.CP = :NEW.CP;
    END LOOP;
END;
/ 


CREATE OR REPLACE TRIGGER check_key_in_funcionarios
BEFORE INSERT OR UPDATE ON FORNECEDORES
FOR EACH ROW
DECLARE
    v_count INT;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM FUNCIONARIOS f
    WHERE f.CC = :NEW.CC;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Chave duplicada encontrada em Funcionários.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER check_key_in_fornecedores
BEFORE INSERT OR UPDATE ON FUNCIONARIOS
FOR EACH ROW
DECLARE
    v_count INT;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM FORNECEDORES f
    WHERE f.CC = :NEW.CC;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Chave duplicada encontrada em Fornecedores.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER check_key_in_prato
BEFORE INSERT OR UPDATE ON BEBIDA
FOR EACH ROW
DECLARE
    v_count INT;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM PRATO p
    WHERE p.NOMEITEM = :NEW.NOMEITEM;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Chave duplicada encontrada em Prato.');
    END IF;
END;
/


CREATE OR REPLACE TRIGGER check_key_in_bebidas
BEFORE INSERT OR UPDATE ON PRATO
FOR EACH ROW
DECLARE
    v_count INT;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM BEBIDA b
    WHERE b.NOMEITEM = :NEW.NOMEITEM;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Chave duplicada encontrada em Bebida.');
    END IF;
END;
/


CREATE OR REPLACE TRIGGER check_key_in_chef
BEFORE INSERT OR UPDATE ON DIRECAO
FOR EACH ROW
DECLARE
    v_count INT;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM CHEF c
    WHERE c.CC = :NEW.CC;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Chave duplicada encontrada em Chef.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER check_key_in_direcao
BEFORE INSERT OR UPDATE ON CHEF
FOR EACH ROW
DECLARE
    v_count INT;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM DIRECAO d
    WHERE d.CC = :NEW.CC;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Chave duplicada encontrada em Direcao.');
    END IF;
END;
/

--Garante que não há dois pedidos do mesmo cliente ao mesmo tempo em restaurntes diferentes--
CREATE OR REPLACE TRIGGER prevent_concurrent_orders
BEFORE INSERT ON PEDIDOS
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM PEDIDOS p
    WHERE p.CC = :NEW.CC
      AND p.NUMEROPEDIDO <> :NEW.NUMEROPEDIDO -- Ignorar o próprio pedido
      AND p.NUMEROCADEIA <> :NEW.NUMEROCADEIA
      AND p.CP <> :NEW.CP
      AND p.TEMPO_TERMINO > SYSDATE;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cliente já tem um pedido em andamento em outro restaurante.');
    END IF;
END;
/

--UPDATE ON CASCADE --

CREATE OR REPLACE TRIGGER update_cascade_restaurante
BEFORE UPDATE ON RESTAURANTES
FOR EACH ROW
BEGIN
    UPDATE PEDIDOS
    SET NUMEROCADEIA = :NEW.NUMEROCADEIA,
        CP = :NEW.CP
    WHERE CP = :OLD.CP AND NUMEROCADEIA = :OLD.NUMEROCADEIA;

    UPDATE STOCK
    SET NUMEROCADEIA = :NEW.NUMEROCADEIA,
        CP = :NEW.CP
    WHERE CP = :OLD.CP AND NUMEROCADEIA = :OLD.NUMEROCADEIA;

    UPDATE INVENTARIO
    SET NUMEROCADEIA = :NEW.NUMEROCADEIA,
        CP = :NEW.CP
    WHERE CP = :OLD.CP AND NUMEROCADEIA = :OLD.NUMEROCADEIA;

    UPDATE FREQUENTAM
    SET NUMEROCADEIA = :NEW.NUMEROCADEIA,
        CP = :NEW.CP
    WHERE CP = :OLD.CP AND NUMEROCADEIA = :OLD.NUMEROCADEIA;

    UPDATE CARTAS
    SET NUMEROCADEIA = :NEW.NUMEROCADEIA,
        CP = :NEW.CP
    WHERE CP = :OLD.CP AND NUMEROCADEIA = :OLD.NUMEROCADEIA;

END;
/

CREATE OR REPLACE TRIGGER update_cascade_pessoas
BEFORE UPDATE ON PESSOAS
FOR EACH ROW
BEGIN
    UPDATE FORNECEDORES
    SET CC = :NEW.CC
    WHERE CC = :OLD.CC;

    UPDATE FUNCIONARIOS
    SET CC = :NEW.CC
    WHERE CC = :OLD.CC;

    UPDATE CONTACTOS
    SET CC = :NEW.CC
    WHERE CC = :OLD.CC;

    UPDATE PEDIDOS
    SET CC = :NEW.CC
    WHERE CC = :OLD.CC;

    UPDATE FREQUENTAM
    SET CC = :NEW.CC
    WHERE CC = :OLD.CC;

    UPDATE GERE
    SET CC = :NEW.CC
    WHERE CC = :OLD.CC;

    UPDATE FORNECE
    SET CC = :NEW.CC
    WHERE CC = :OLD.CC;

END;
/

CREATE OR REPLACE TRIGGER update_cascade_funcionarios
BEFORE UPDATE ON FUNCIONARIOS
FOR EACH ROW
BEGIN
    UPDATE CHEF
    SET CC = :NEW.CC
    WHERE CC = :OLD.CC;

    UPDATE DIRECAO
    SET CC = :NEW.CC
    WHERE CC = :OLD.CC;


END;
/

CREATE OR REPLACE TRIGGER update_cascade_cardapio
BEFORE UPDATE ON CARDAPIO
FOR EACH ROW
BEGIN
    UPDATE ITEM
    SET EPOCA = :NEW.EPOCA
    WHERE EPOCA = :OLD.EPOCA;

    UPDATE CARTAS
    SET EPOCA = :NEW.EPOCA
    WHERE EPOCA = :OLD.EPOCA;

END;
/

CREATE OR REPLACE TRIGGER update_cascade_item
BEFORE UPDATE ON ITEM
FOR EACH ROW
BEGIN
    UPDATE PRATO
    SET NOMEITEM = :NEW.NOMEITEM
    WHERE NOMEITEM = :OLD.NOMEITEM;

    UPDATE BEBIDA
    SET NOMEITEM = :NEW.NOMEITEM
    WHERE NOMEITEM = :OLD.NOMEITEM;

    UPDATE ENCOMENDA
    SET NOMEITEM = :NEW.NOMEITEM
    WHERE NOMEITEM = :OLD.NOMEITEM;

    UPDATE CONSTITUICAO
    SET NOMEITEM = :NEW.NOMEITEM
    WHERE NOMEITEM = :OLD.NOMEITEM;

END;
/

CREATE OR REPLACE TRIGGER update_cascade_ingredientes
BEFORE UPDATE ON INGREDIENTES
FOR EACH ROW
BEGIN
    UPDATE STOCK
    SET CODIGOINGREDIENTES = :NEW.CODIGOINGREDIENTES
    WHERE CODIGOINGREDIENTES = :OLD.CODIGOINGREDIENTES;

     UPDATE FORNECE
    SET CODIGOINGREDIENTES = :NEW.CODIGOINGREDIENTES
    WHERE CODIGOINGREDIENTES = :OLD.CODIGOINGREDIENTES;
    
    UPDATE CONSTITUICAO
    SET CODIGOINGREDIENTES = :NEW.CODIGOINGREDIENTES
    WHERE CODIGOINGREDIENTES = :OLD.CODIGOINGREDIENTES;

END;
/

CREATE OR REPLACE TRIGGER update_cascade_bens
BEFORE UPDATE ON MOBILIA_MATERIAIS
FOR EACH ROW
BEGIN
    UPDATE INVENTARIO
    SET CODIGOBENS = :NEW.CODIGOBENS
    WHERE CODIGOBENS = :OLD.CODIGOBENS;
END;
/

CREATE OR REPLACE TRIGGER update_cascade_pedidos
BEFORE UPDATE ON PEDIDOS
FOR EACH ROW
BEGIN
    UPDATE ENCOMENDA
    SET NUMEROPEDIDO = :NEW.NUMEROPEDIDO
    WHERE NUMEROPEDIDO = :OLD.NUMEROPEDIDO;
END;
/

-- VIEWS --
CREATE OR REPLACE VIEW vw_fornecedores_ingredientes
AS
SELECT p.NOMEPESSOA, p.NIF, p.EMAIL, i.NOME AS INGREDIENTE
FROM PESSOAS p
JOIN FORNECEDORES f ON p.CC = f.CC
JOIN FORNECE ff ON f.CC = ff.CC
JOIN INGREDIENTES i ON ff.CODIGOINGREDIENTES = i.CODIGOINGREDIENTES;

--VIEW DE FUNCIONARIOS NAO DESTACADOS
CREATE OR REPLACE VIEW vw_funcionarios_nao_destacados
AS
SELECT p.NOMEPESSOA, p.EMAIL
FROM PESSOAS p
JOIN FUNCIONARIOS f ON p.CC = f.CC
WHERE NOT EXISTS (
    SELECT 1
    FROM FREQUENTAM fr
    WHERE fr.CC = f.CC
);

--Pedidos por restaurante e cliente
CREATE OR REPLACE VIEW vw_pedidos_restaurante_cliente
AS
SELECT p.NUMEROPEDIDO, r.NOMERESTAURANTE, pe.NOMEPESSOA, p.HORA, p.NUMEROCLIENTES
FROM PEDIDOS p
JOIN RESTAURANTES r ON p.NUMEROCADEIA = r.NUMEROCADEIA AND p.CP = r.CP
JOIN PESSOAS pe ON p.CC = pe.CC;

-- Ingredientes em falta por restaurante--
CREATE OR REPLACE VIEW vw_ingredientes_em_falta AS
SELECT r.NOMERESTAURANTE, i.NOME AS INGREDIENTE
FROM STOCK s
JOIN INGREDIENTES i ON s.CODIGOINGREDIENTES = i.CODIGOINGREDIENTES
JOIN RESTAURANTES r ON s.NUMEROCADEIA = r.NUMEROCADEIA AND s.CP = r.CP
WHERE s.QUANTIDADE_STOCK = 0;

CREATE OR REPLACE VIEW vw_funcionarios_cargos
AS
SELECT p.NOMEPESSOA, p.EMAIL, r.NOMERESTAURANTE,
       CASE
           WHEN f.CC IS NOT NULL THEN 'Funcionário'
           WHEN d.CC IS NOT NULL THEN 'Direção'
           WHEN c.CC IS NOT NULL THEN 'Chef'
           ELSE 'Outro'
       END AS CARGO
FROM PESSOAS p
LEFT JOIN FUNCIONARIOS f ON p.CC = f.CC
LEFT JOIN DIRECAO d ON p.CC = d.CC
LEFT JOIN CHEF c ON p.CC = c.CC
JOIN FREQUENTAM fr ON fr.CC = p.CC
JOIN RESTAURANTES r ON fr.CP = r.CP AND fr.NUMEROCADEIA = r.NUMEROCADEIA;


-- Tabela MOBILIA_MATERIAIS
INSERT INTO MOBILIA_MATERIAIS (CODIGOBENS, NOMEBENS) VALUES (1, 'Cadeira');
INSERT INTO MOBILIA_MATERIAIS (CODIGOBENS, NOMEBENS) VALUES (2, 'Mesa');
INSERT INTO MOBILIA_MATERIAIS (CODIGOBENS, NOMEBENS) VALUES (3, 'Prato');
INSERT INTO MOBILIA_MATERIAIS (CODIGOBENS, NOMEBENS) VALUES (4, 'Copo');
INSERT INTO MOBILIA_MATERIAIS (CODIGOBENS, NOMEBENS) VALUES (5, 'Talheres');
INSERT INTO MOBILIA_MATERIAIS (CODIGOBENS, NOMEBENS) VALUES (6, 'Panela');

-- Tabela PESSOAS
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES ('João Silva', '123456789', '12345', 'joao@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES ('Maria Rodrigues', '987654321', '54321', 'maria@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES ('Pedro Santos', '456789123', '67890', 'pedro@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES ('Ana Ferreira', '789123456', '13579', 'ana@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES ('Carlos Oliveira', '321654987', '24680', 'carlos@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES ('Sofia Martins', '159357642', '86420', 'sofia@example.com');

INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES ('Sofia Leite', '159357643', '86421', 'sofialeite@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES ('Carlos Lima', '321654988', '24681', 'carlitos@example.com');

-- Tabela DIRECAO
INSERT INTO DIRECAO (CC, BONUS) VALUES ('12345', 1000.00);
INSERT INTO DIRECAO (CC, BONUS) VALUES ('54321', 1500.00);
INSERT INTO DIRECAO (CC, BONUS) VALUES ('67890', 2000.00);
INSERT INTO DIRECAO (CC, BONUS) VALUES ('13579', 1200.00);
INSERT INTO DIRECAO (CC, BONUS) VALUES ('24680', 1800.00);

-- Tabela CHEF
/*INSERT INTO CHEF (CC, ESTRELAS) VALUES ('12345', 3);
INSERT INTO CHEF (CC, ESTRELAS) VALUES ('54321', 2);
INSERT INTO CHEF (CC, ESTRELAS) VALUES ('67890', 4);
INSERT INTO CHEF (CC, ESTRELAS) VALUES ('13579', 1);
INSERT INTO CHEF (CC, ESTRELAS) VALUES ('24680', 3);*/
INSERT INTO CHEF (CC, ESTRELAS) VALUES ('86420', 2);

-- Tabela CONTACTOS
INSERT INTO CONTACTOS (CC, NUMEROTELEFONE) VALUES ('12345', '123456789');
INSERT INTO CONTACTOS (CC, NUMEROTELEFONE) VALUES ('54321', '987654321');
INSERT INTO CONTACTOS (CC, NUMEROTELEFONE) VALUES ('67890', '456789123');
INSERT INTO CONTACTOS (CC, NUMEROTELEFONE) VALUES ('13579', '789123456');
INSERT INTO CONTACTOS (CC, NUMEROTELEFONE) VALUES ('24680', '321654987');
INSERT INTO CONTACTOS (CC, NUMEROTELEFONE) VALUES ('86420', '159357642');


-- Tabela CARDAPIO
INSERT INTO CARDAPIO (EPOCA, NOMECARDAPIO) VALUES ('Verão', 'Cardápio Verão');
INSERT INTO CARDAPIO (EPOCA, NOMECARDAPIO) VALUES ('Inverno', 'Cardápio Inverno');
INSERT INTO CARDAPIO (EPOCA, NOMECARDAPIO) VALUES ('Primavera', 'Cardápio Primavera');
INSERT INTO CARDAPIO (EPOCA, NOMECARDAPIO) VALUES ('Outono', 'Cardápio Outono');
INSERT INTO CARDAPIO (EPOCA, NOMECARDAPIO) VALUES ('Verão', NULL);
INSERT INTO CARDAPIO (EPOCA, NOMECARDAPIO) VALUES ('Inverno', NULL);

-- Tabela INGREDIENTES
INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES (codigo_ingredientes.NEXTVAL, 'Tomate', 'Portugal', TO_DATE('2023-06-30','yyyy-mm-dd'), 1.50);
INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES (codigo_ingredientes.NEXTVAL, 'Alho', 'Espanha', TO_DATE('2023-07-15','yyyy-mm-dd'), 2.00);
INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES (codigo_ingredientes.NEXTVAL, 'Cebola', 'Portugal', TO_DATE('2023-06-20','yyyy-mm-dd'), 1.20);


-- Inserir dados na tabela MORADA
INSERT INTO MORADA (CP, LOCALIDADE) VALUES
(1000, 'Lisboa');
INSERT INTO MORADA (CP, LOCALIDADE) VALUES
(2000, 'Porto');
INSERT INTO MORADA (CP, LOCALIDADE) VALUES
(3000, 'Faro');

-- Inserir dados na tabela RESTAURANTES
INSERT INTO RESTAURANTES (NUMEROCADEIA, NOMERESTAURANTE, HORAABERTURA, HORAFECHO, LUGARES, CP) VALUES
(1, 'Restaurante Lisboa', '11:00', '23:00', 50, 1000);
INSERT INTO RESTAURANTES (NUMEROCADEIA, NOMERESTAURANTE, HORAABERTURA, HORAFECHO, LUGARES, CP) VALUES
(2, 'Restaurante Porto', '12:00', '22:00', 60, 2000);
INSERT INTO RESTAURANTES (NUMEROCADEIA, NOMERESTAURANTE, HORAABERTURA, HORAFECHO, LUGARES, CP) VALUES
(3, 'Restaurante Faro', '10:00', '21:00', 45, 3000);
INSERT INTO RESTAURANTES (NUMEROCADEIA, NOMERESTAURANTE, HORAABERTURA, HORAFECHO, LUGARES, CP) VALUES
(4, 'Tasca da Vila', '09:00', '20:00', 55, 1000);
-- Insert 6 records into FUNCIONARIOS table
INSERT INTO FUNCIONARIOS (CC, SALARIO) VALUES
('12345', 5000.00);
INSERT INTO FUNCIONARIOS (CC, SALARIO) VALUES
('54321', 4500.00);
INSERT INTO FUNCIONARIOS (CC, SALARIO) VALUES
('67890', 6000.00);
INSERT INTO FUNCIONARIOS (CC, SALARIO) VALUES
('13579', 4000.00);
INSERT INTO FUNCIONARIOS (CC, SALARIO) VALUES
('24681', 5500.00);
INSERT INTO FUNCIONARIOS (CC, SALARIO) VALUES
('86421', 4800.00);

-- Inserindo valores na tabela FREQUENTAM

INSERT INTO FREQUENTAM (CC, NUMEROCADEIA, CP) VALUES
('12345', 1, 1000);
INSERT INTO FREQUENTAM (CC, NUMEROCADEIA, CP) VALUES
('54321', 2, 2000);
INSERT INTO FREQUENTAM (CC, NUMEROCADEIA, CP) VALUES
('67890', 4, 1000);
INSERT INTO FREQUENTAM (CC, NUMEROCADEIA, CP) VALUES
('13579', 3, 3000);
INSERT INTO FREQUENTAM (CC, NUMEROCADEIA, CP) VALUES
('24681', 4, 1000);
INSERT INTO FREQUENTAM (CC, NUMEROCADEIA, CP) VALUES
('86421', 1, 1000);


-- Tabela PEDIDOS
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, TEMPO_TERMINO, NUMEROCLIENTES, CP, NUMEROCADEIA, CC) VALUES (1, '12:00', '13:30', 4, 1000, 1, '12345');
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, TEMPO_TERMINO, NUMEROCLIENTES, CP, NUMEROCADEIA, CC) VALUES (2, '18:00', '19:15', 2, 2000, 2, '54321');
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, TEMPO_TERMINO, NUMEROCLIENTES, CP, NUMEROCADEIA, CC) VALUES (3, '14:30', '16:00', 6, 3000, 3, '67890');
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, TEMPO_TERMINO, NUMEROCLIENTES, CP, NUMEROCADEIA, CC) VALUES (4, '20:00', '21:45', 3, 4000, 1, '13579');
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, TEMPO_TERMINO, NUMEROCLIENTES, CP, NUMEROCADEIA, CC) VALUES (5, '11:30', '13:00', 5, 4000, 1, '24680');
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, TEMPO_TERMINO, NUMEROCLIENTES, CP, NUMEROCADEIA, CC) VALUES (6, '16:00', '17:30', 4, 1000, 1, '86420');

-- Insert 15 records into PESSOAS table
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('John Doe', '123456789', '12345', 'john@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Jane Smith', '987654321', '54321', 'jane@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Michael Johnson', '456789123', '67890', 'michael@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Emily Davis', '789123456', '13579', 'emily@example.com');

INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('David Wilson', '321654987', '24680', 'david@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Sophia Martinez', '159357642', '86420', 'sophia@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('William Brown', '753159486', '97531', 'william@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Olivia Taylor', '486975123', '53719', 'olivia@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('James Anderson', '159753486', '86421', 'james@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Emma Thomas', '753951486', '64208', 'emma@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Daniel Moore', '486723159', '95317', 'daniel@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Isabella Jackson', '159486753', '75316', 'isabella@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Matthew Garcia', '753159753', '64297', 'matthew@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Ava Rodriguez', '159753486', '42086', 'ava@example.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES
('Alexander Hernandez', '486753159', '31975', 'alexander@example.com');

-- Tabela FORNECEDORES
INSERT INTO FORNECEDORES (CC, NUMEROCONTA) VALUES ('31975', '123456789');
INSERT INTO FORNECEDORES (CC, NUMEROCONTA) VALUES ('53719', '987654321');
INSERT INTO FORNECEDORES (CC, NUMEROCONTA) VALUES ('42086', '456789123');
INSERT INTO FORNECEDORES (CC, NUMEROCONTA) VALUES ('97531', '789123456');
INSERT INTO FORNECEDORES (CC, NUMEROCONTA) VALUES ('24680', '321654987');
INSERT INTO FORNECEDORES (CC, NUMEROCONTA) VALUES ('64297', '159357642');



-- Insere alguns ingredientes
INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES
(codigo_ingredientes.NEXTVAL, 'Frango', 'Portugal', DATE '2023-06-30', 5.00);
INSERT INTO STOCK (CODIGOINGREDIENTES, NUMEROCADEIA, CP, QUANTIDADE_STOCK) VALUES (codigo_ingredientes.CURRVAL, 1, 1000, 100);

INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES(codigo_ingredientes.NEXTVAL, 'Arroz', 'Espanha', DATE '2023-07-15', 2.50);
INSERT INTO STOCK (CODIGOINGREDIENTES, NUMEROCADEIA, CP, QUANTIDADE_STOCK) VALUES (codigo_ingredientes.CURRVAL, 2, 2000, 50);
INSERT INTO STOCK (CODIGOINGREDIENTES, NUMEROCADEIA, CP, QUANTIDADE_STOCK) VALUES (codigo_ingredientes.CURRVAL, 3, 3000, 75);

INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES(codigo_ingredientes.NEXTVAL, 'Cenoura', 'Portugal', DATE '2023-06-20', 1.20);
INSERT INTO STOCK (CODIGOINGREDIENTES, NUMEROCADEIA, CP, QUANTIDADE_STOCK) VALUES (codigo_ingredientes.CURRVAL, 4, 1000, 120);

INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES
(codigo_ingredientes.NEXTVAL, 'Batata', 'França', DATE '2023-07-10', 0.80);
INSERT INTO STOCK (CODIGOINGREDIENTES, NUMEROCADEIA, CP, QUANTIDADE_STOCK) VALUES (codigo_ingredientes.CURRVAL, 2, 2000, 0);



-- Insere um cardapio
INSERT INTO CARDAPIO(EPOCA, NOMECARDAPIO) VALUES ('Verão','Verão 2024');

-- Insere um item (prato)
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Frango com Arroz', 'Verão', 'Frango grelhado com arroz e legumes', 10.00);

-- Insere mais itens (pratos)
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Sopa de Legumes', 'Inverno', 'Sopa quente de legumes variados', 5.00);

INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Salada Caesar', 'Primavera', 'Salada com alface, frango, croutons e molho Caesar', 8.50);
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Pasta Carbonara', 'Outono', 'Massa com molho carbonara, bacon e queijo parmesão', 12.00);
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Peixe Grelhado', 'Verão', 'Peixe grelhado com batatas e salada', 15.00);
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Risotto de Cogumelos', 'Inverno', 'Risotto cremoso com cogumelos frescos', 14.00);
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Tacos de Carne', 'Primavera', 'Tacos recheados com carne temperada e vegetais', 9.00);
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Bife à Portuguesa', 'Outono', 'Bife grelhado com batatas fritas e molho especial', 18.00);
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Mocktail de Limão', 'Outono', 'Cocktail de limão sem álcool', 18.00);

INSERT INTO PRATO (NOMEITEM, TIPO) VALUES
('Frango com Arroz', 'Principal');


INSERT INTO CONSTITUICAO (CODIGOINGREDIENTES, NOMEITEM, QUANTIDADECONST) VALUES
((SELECT CODIGOINGREDIENTES FROM INGREDIENTES WHERE NOME = 'Frango'), 'Frango com Arroz', 1);
INSERT INTO CONSTITUICAO (CODIGOINGREDIENTES, NOMEITEM, QUANTIDADECONST) VALUES

((SELECT CODIGOINGREDIENTES FROM INGREDIENTES WHERE NOME = 'Arroz'), 'Frango com Arroz', 2);
INSERT INTO CONSTITUICAO (CODIGOINGREDIENTES, NOMEITEM, QUANTIDADECONST) VALUES

((SELECT CODIGOINGREDIENTES FROM INGREDIENTES WHERE NOME = 'Cenoura'), 'Frango com Arroz', 1);
INSERT INTO CONSTITUICAO (CODIGOINGREDIENTES, NOMEITEM, QUANTIDADECONST) VALUES

((SELECT CODIGOINGREDIENTES FROM INGREDIENTES WHERE NOME = 'Batata'), 'Frango com Arroz', 2);


-- Insere alguns ingredientes
INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES
(codigo_ingredientes.NEXTVAL, 'Frango', 'Portugal', DATE '2023-06-30', 5.00);
INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES(codigo_ingredientes.NEXTVAL, 'Arroz', 'Espanha', DATE '2023-07-15', 2.50);
INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES(codigo_ingredientes.NEXTVAL, 'Cenoura', 'Portugal', DATE '2023-06-20', 1.20);
INSERT INTO INGREDIENTES (CODIGOINGREDIENTES, NOME, PROVENIENCIA, DATAVALIDADE, PRECO) VALUES
(codigo_ingredientes.NEXTVAL, 'Batata', 'França', DATE '2023-07-10', 0.80);

INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES('João Silva', '123456789', '12345678', 'joao@email.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES('Maria Fernandes', '987654321', '87654321', 'maria@email.com');
INSERT INTO MORADA (CP,LOCALIDADE) VALUES (1000, 'Corroios');

INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, TEMPO_TERMINO, NUMEROCLIENTES, CP, NUMEROCADEIA, CC)
VALUES (numero_pedido.NEXTVAL, '13:00', '20:00', 3 ,1000, 1, '12345678');

INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA,TEMPO_TERMINO, NUMEROCLIENTES,CP, NUMEROCADEIA, CC)
VALUES (numero_pedido.NEXTVAL, '09:00', '13:00',1, 2000, 2, '87654321');

-- Insere um pedido dentro do horário de operação do restaurante
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, TEMPO_TERMINO,NUMEROCLIENTES, CP, NUMEROCADEIA, CC)
VALUES (numero_pedido.NEXTVAL, '13:00', '13:30',5, 1000, 1, '12345678');
-- Tabela ENCOMENDA
INSERT INTO ENCOMENDA (NUMEROPEDIDO, NOMEITEM, QUANTIDADEENCOMENDA) VALUES (numero_pedido.CURRVAL, 'Frango com Arroz', 2);

INSERT INTO ENCOMENDA (NUMEROPEDIDO, NOMEITEM, QUANTIDADEENCOMENDA) VALUES (numero_pedido.CURRVAL, 'Pasta Carbonara', 1);
INSERT INTO ENCOMENDA (NUMEROPEDIDO, NOMEITEM, QUANTIDADEENCOMENDA) VALUES (numero_pedido.CURRVAL, 'Bife à Portuguesa', 3);
INSERT INTO ENCOMENDA (NUMEROPEDIDO, NOMEITEM, QUANTIDADEENCOMENDA) VALUES (numero_pedido.CURRVAL, 'Tacos de Carne', 2);
INSERT INTO ENCOMENDA (NUMEROPEDIDO, NOMEITEM, QUANTIDADEENCOMENDA) VALUES (numero_pedido.CURRVAL, 'Mocktail de Limão', 4);


-- Insere outro pedido dentro do horário de operação do restaurante
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, TEMPO_TERMINO,NUMEROCLIENTES, CP, NUMEROCADEIA, CC)
VALUES (numero_pedido.NEXTVAL, '19:00','20:00', 10, 2000, 2, '87654321');


-- Tabela INVENTARIO
INSERT INTO INVENTARIO (NUMEROCADEIA, CP, CODIGOBENS, QUANTIDADE_INVENTARIO) VALUES (1, 1000, 1, 20);
INSERT INTO INVENTARIO (NUMEROCADEIA, CP, CODIGOBENS, QUANTIDADE_INVENTARIO) VALUES (2, 2000, 2, 15);
INSERT INTO INVENTARIO (NUMEROCADEIA, CP, CODIGOBENS, QUANTIDADE_INVENTARIO) VALUES (3, 3000, 3, 25);
INSERT INTO INVENTARIO (NUMEROCADEIA, CP, CODIGOBENS, QUANTIDADE_INVENTARIO) VALUES (4, 4000, 4, 30);
INSERT INTO INVENTARIO (NUMEROCADEIA, CP, CODIGOBENS, QUANTIDADE_INVENTARIO) VALUES (5, 5000, 5, 18);

INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES('Maria Lurdesinha', '7654328', '00345', 'marialurdesinha@email.com');
INSERT INTO FORNECEDORES(CC, NUMEROCONTA) VALUES('00345', '321');
--Tabela Fornece 
INSERT INTO FORNECE (CC,CODIGOINGREDIENTES) VALUES ('00345', codigo_ingredientes.CURRVAL);
INSERT INTO FORNECE (CC,CODIGOINGREDIENTES) VALUES ('12345', 1); 
INSERT INTO FORNECE (CC,CODIGOINGREDIENTES) VALUES ('12345', 1); 
INSERT INTO FORNECE (CC,CODIGOINGREDIENTES) VALUES ('12345', 2); 
INSERT INTO FORNECE (CC,CODIGOINGREDIENTES) VALUES ('12345', 3); 

INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES('Maria Agosto', '986354328', '54521', 'mariaagosto@email.com');
INSERT INTO FORNECEDORES(CC, NUMEROCONTA) VALUES('54521', '35112121');
INSERT INTO FORNECE (CC,CODIGOINGREDIENTES) VALUES ('54521', codigo_ingredientes.CURRVAL); 
INSERT INTO FORNECE (CC,CODIGOINGREDIENTES) VALUES ('54521', 3); 

INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES('Maria Felizarda', '98','67896', 'mariafelizarda@email.com');
INSERT INTO FORNECEDORES(CC, NUMEROCONTA) VALUES('67896', '931');
INSERT INTO FORNECE (CC,CODIGOINGREDIENTES) VALUES ('67896', 6);

INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES('Mario Quintana', '997659328','12346', 'marioquintana@email.com');
INSERT INTO DIRECAO (CC,BONUS) VALUES('12346', 5.0);

-- Tabela GERE 
INSERT INTO GERE (CC, DIRECAO_CC) VALUES ('86420','12346');
INSERT INTO GERE (CC, DIRECAO_CC) VALUES ('24680','12346');
INSERT INTO GERE (CC, DIRECAO_CC) VALUES ('13579','12346'); 
INSERT INTO GERE (CC, DIRECAO_CC) VALUES ('67890','12346');



INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Mojito', 'Primavera', 'LIMAOOOOO', 8.50);
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Caipirinha', 'Primavera', 'Especial do Brasil', 8.50);
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Caipiroska', 'Primavera', 'Rússia e Brasil', 8.50);
INSERT INTO ITEM (NOMEITEM, EPOCA, DESCRICAO, PRECO) VALUES
('Cerveja SuperBock', 'Primavera', 'Cerveja de cevada', 8.50);

-- Insere em BEBIDA table 
INSERT INTO BEBIDA (NOMEITEM, TEORALCOOL) VALUES ('Mojito', 10.0); 
INSERT INTO BEBIDA (NOMEITEM, TEORALCOOL) VALUES ('Caipirinha', 15.0); 
INSERT INTO BEBIDA (NOMEITEM, TEORALCOOL) VALUES ('Caipiroska', 17.0); 
INSERT INTO BEBIDA (NOMEITEM, TEORALCOOL) VALUES ('Cerveja SuperBock', 5.0);