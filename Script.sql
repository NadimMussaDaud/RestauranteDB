
CREATE TABLE RESTAURANTES (
    NUMEROCADEIA INT CHECK(NUMEROCADEIA > 0),
    NOMERESTAURANTE VARCHAR(100) UNIQUE NOT NULL,
    HORAABERTURA TIMESTAMP NOT NULL ,
    HORAFECHO TIMESTAMP NOT NULL ,
    LUGARES INT CHECK(LUGARES > 40) NOT NULL,
    CP INT,
    PRIMARY KEY (NUMEROCADEIA, CP),
    FOREIGN KEY (CP) REFERENCES MORADA(CP),
    CONSTRAINT check_opening_time CHECK(HORAFECHO > HORAABERTURA)
);

CREATE TABLE MORADA (
    CP INT PRIMARY KEY,
    LOCALIDADE VARCHAR(100)
);

CREATE TABLE MOBILIA_MATERIAIS (
    CODIGOBENS INT PRIMARY KEY,
    NOMEBENS VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE PESSOAS (
    NOMEPESSOA VARCHAR(100) UNIQUE NOT NULL,
    NIF VARCHAR(20) UNIQUE,
    CC VARCHAR(20) PRIMARY KEY,
    EMAIL VARCHAR(100) UNIQUE
);

CREATE TABLE FUNCIONARIOS (
    CC VARCHAR(20),
    PRIMARY KEY (CC),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC)
);

CREATE TABLE FORNECEDORES (
    CC VARCHAR(20),
    NUMEROCONTA VARCHAR(50) UNIQUE NOT NULL,
    PRIMARY KEY (CC),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC)
);

CREATE TABLE DIRECAO (
    CC VARCHAR(20),
    BONUS DECIMAL(10, 2) NOT NULL CHECK(BONUS >= 0),
    PRIMARY KEY (CC),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC)
);

CREATE TABLE CHEF (
    CC VARCHAR(20) ,
    ESTRELAS INT CHECK(ESTRELAS >= 0),
    PRIMARY KEY (CC),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC)
);

CREATE TABLE CONTACTOS (
    CC VARCHAR(20),
    NUMEROTELEFONE VARCHAR(15) UNIQUE, --Duas pessoas não podem ter o mesmo número
    PRIMARY KEY (CC, NUMEROTELEFONE),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC)
);

CREATE TABLE PEDIDOS (
    NUMEROPEDIDO INT PRIMARY KEY,
    HORA TIMESTAMP,
    DATA DATE,
    CP INT,
    NUMEROCADEIA INT,
    CC VARCHAR(20),
    FOREIGN KEY (CP) REFERENCES MORADA,
    FOREIGN KEY (NUMEROCADEIA) REFERENCES RESTAURANTES,
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC)
);

CREATE TABLE CARDAPIO (
    EPOCA VARCHAR(10) PRIMARY KEY  CHECK (EPOCA IN ('Verão', 'Inverno', 'Primavera', 'Outono')),
    NOMECARDAPIO VARCHAR(100) -- Pode não ter nome o cardápio --
);

CREATE TABLE INGREDIENTES (
    CODIGOINGREDIENTES INT PRIMARY KEY,
    NOME VARCHAR(100) UNIQUE NOT NULL,
    PROVENIENCIA VARCHAR(100),
    DATAVALIDADE DATE NOT NULL,
    CUSTO DECIMAL(10, 2) CHECK (CUSTO > 0)
);

CREATE TABLE ITEM (
    NOMEITEM VARCHAR(100) PRIMARY KEY,
    EPOCA VARCHAR(10) CHECK (EPOCA IN ('Verão', 'Inverno', 'Primavera', 'Outono')),
    DESCRICAO VARCHAR(255) NOT NULL,
    PRECO DECIMAL(10, 2) CHECK (PRECO > 0),
    FOREIGN KEY (EPOCA) REFERENCES CARDAPIO(EPOCA)
);

CREATE TABLE PRATO (
    NOMEITEM VARCHAR(100) PRIMARY KEY,
    TIPO VARCHAR(50) CHECK (TIPO IN ('Principal', 'Entrada', 'Sobremesa')),
    FOREIGN KEY (NOMEITEM) REFERENCES ITEM(NOMEITEM)
);

CREATE TABLE BEBIDA (
    NOMEITEM VARCHAR(100) PRIMARY KEY,
    TEORALCOOL DECIMAL(5, 2) CHECK (TEORALCOOL >= 0), 
    FOREIGN KEY (NOMEITEM) REFERENCES ITEM(NOMEITEM)
);

CREATE TABLE STOCK (
    CODIGOINGREDIENTES INT,
    NUMEROCADEIA INT,
    CP INT,
    QUANTIDADE_STOCK INT CHECK (QUANTIDADE >= 0),
    PRIMARY KEY (CODIGOINGREDIENTES, NUMEROCADEIA, CP),
    FOREIGN KEY (CODIGOINGREDIENTES) REFERENCES INGREDIENTES(CODIGOINGREDIENTES),
    FOREIGN KEY (NUMEROCADEIA,CP) REFERENCES RESTAURANTES(NUMEROCADEIA,CP)
);

CREATE TABLE INVENTARIO (
    NUMEROCADEIA INT,
    CP INT,
    CODIGOBENS INT,
    QUANTIDADE_INVENTARIO INT CHECK( QUANTIDADE_INVENTARIO >= 0),
    PRIMARY KEY (NUMEROCADEIA, CP, CODIGOBENS),
    FOREIGN KEY (NUMEROCADEIA, CP) REFERENCES RESTAURANTES(NUMEROCADEIA, CP),
    FOREIGN KEY (CODIGOBENS) REFERENCES BENS(CODIGOBENS)
);

CREATE TABLE FREQUENTAM (
    CC VARCHAR(20),
    NUMEROCADEIA INT,
    CP INT,
    PRIMARY KEY (CC, NUMEROCADEIA, CP),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC),
    FOREIGN KEY (NUMEROCADEIA) REFERENCES RESTAURANTES(NUMEROCADEIA, CP)
);

CREATE TABLE CARTAS (
    EPOCA VARCHAR(50),
    NUMEROCADEIA INT,
    CP INT,
    PRIMARY KEY (EPOCA, NUMEROCADEIA, CP),
    FOREIGN KEY (NUMEROCADEIA, CP) REFERENCES RESTAURANTES(NUMEROCADEIA, CP),
    FOREIGN KEY (EPOCA) REFERENCES CARDAPIO(EPOCA)
);

CREATE TABLE GERE (
    CC VARCHAR(20),
    DIRECAO_CC VARCHAR(20),
    PRIMARY KEY (CC),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC),
    FOREIGN KEY (DIRECAO_CC) REFERENCES PESSOAS(CC)

);

--SERÁ QUE SE DEVE ACRESCENTAR OS OUTROS ATRIBUTOS
CREATE TABLE FORNECE (
    CC VARCHAR(20),
    CODIGOINGREDIENTE INT,
    PRIMARY KEY (CC, CODIGOINGREDIENTE),
    FOREIGN KEY (CC) REFERENCES PESSOAS(CC),
    FOREIGN KEY (CODIGOINGREDIENTE) REFERENCES INGREDIENTES(CODIGOINGREDIENTES)
);

CREATE TABLE ENCOMENDA (
    NUMEROPEDIDO INT,
    NOMEITEM VARCHAR(100),
    QUANTIDADEENCOMENDA INT CHECK (QUANTIDADEENCOMENDA >= 0) NOT NULL,
    PRIMARY KEY (NUMEROPEDIDO, NOMEITEM),
    FOREIGN KEY (NUMEROPEDIDO) REFERENCES PEDIDOS(NUMEROPEDIDO),
    FOREIGN KEY (NOMEITEM) REFERENCES ITEM(NOMEITEM)
);

CREATE TABLE CONSTITUICAO (
    CODIGOINGREDIENTE INT,
    NOMEITEM VARCHAR(100),
    QUANTIDADECONST INT CHECK (QUANTIDADECONST > 0),
    PRIMARY KEY (CODIGOINGREDIENTE, NOMEITEM),
    FOREIGN KEY (CODIGOINGREDIENTE) REFERENCES INGREDIENTES(CODIGOINGREDIENTES),
    FOREIGN KEY (NOMEITEM) REFERENCES ITEM(NOMEITEM)
);

CREATE SEQUENCE codigo_bens START WITH 10000 INCREMENT BY 1;
CREATE SEQUENCE codigo_ingredientes START WITH 10000 INCREMENT BY 1;
CREATE SEQUENCE numero_pedido START WITH 1 INCREMENT BY 1;


--Para efeitos de DEBUG
--DROP TABLE RESTAURANTES CASCADE CONSTRAINTS;

--Verifica se está dentro do periodo de operação do restaurante
CREATE OR REPLACE FUNCTION check_order_time(
    p_numeroCadeia IN PEDIDOS.NUMEROCADEIA%TYPE,
    p_hora        IN PEDIDOS.HORA%TYPE
) RETURN BOOLEAN IS
    v_horaAbertura RESTAURANTES.HORAABERTURA%TYPE;
    v_horaFecho    RESTAURANTES.HORAFECHO%TYPE;
BEGIN
    SELECT HORAABERTURA, HORAFECHO INTO v_horaAbertura, v_horaFecho
    FROM RESTAURANTES
    WHERE NUMEROCADEIA = p_numeroCadeia;

    IF p_hora < v_horaAbertura OR p_hora > v_horaFecho THEN
        RETURN FALSE;
    ELSE
        RETURN TRUE;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_check_order_time
BEFORE INSERT OR UPDATE ON PEDIDOS
FOR EACH ROW
DECLARE
    v_is_valid BOOLEAN;
BEGIN
    v_is_valid := check_order_time(:NEW.NUMEROCADEIA, :NEW.HORA);
    IF NOT v_is_valid THEN
        RAISE_APPLICATION_ERROR(-20001, 'Hora do pedido está fora do intervalo de operação do restaurante.');
    END IF;
END;
/
/*

EXEMPLOS

INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES('João Silva', '123456789', '12345678', 'joao@email.com');
INSERT INTO PESSOAS (NOMEPESSOA, NIF, CC, EMAIL) VALUES('Maria Fernandes', '987654321', '87654321', 'maria@email.com');
INSERT INTO MORADA (CP,LOCALIDADE) VALUES (1000, 'Corroios');

INSERT INTO RESTAURANTES (NUMEROCADEIA, NOMERESTAURANTE, HORAABERTURA, HORAFECHO, LUGARES, CP) VALUES
(2, 'Restaurante A', TO_TIMESTAMP('2023-05-25 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-05-25 22:00:00', 'YYYY-MM-DD HH24:MI:SS'), 50, 1000);

INSERT INTO RESTAURANTES (NUMEROCADEIA, NOMERESTAURANTE, HORAABERTURA, HORAFECHO, LUGARES, CP) VALUES (1, 'Restaurante B', TO_TIMESTAMP('2023-05-25 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-05-25 20:00:00', 'YYYY-MM-DD HH24:MI:SS'), 60, 1000);

-- Insere um pedido fora do horário de operação do restaurante (dispara o gatilho)
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, DATA, CP, NUMEROCADEIA, CC)
VALUES (numero_pedido.NEXTVAL, TO_TIMESTAMP('2023-05-25 23:00:00', 'YYYY-MM-DD HH24:MI:SS'), DATE '2023-05-25', 1000, 1, '12345678');

-- Insere outro pedido fora do horário de operação do restaurante (dispara o gatilho)
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, DATA, CP, NUMEROCADEIA, CC)
VALUES (numero_pedido.NEXTVAL, TO_TIMESTAMP('2023-05-25 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), DATE '2023-05-25', 1000, 2, '87654321');

-- Insere um pedido dentro do horário de operação do restaurante
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, DATA, CP, NUMEROCADEIA, CC)
VALUES (numero_pedido.NEXTVAL, TO_TIMESTAMP('2023-05-25 13:00:00', 'YYYY-MM-DD HH24:MI:SS'), DATE '2023-05-25', 1000, 1, '12345678');

-- Insere outro pedido dentro do horário de operação do restaurante
INSERT INTO PEDIDOS (NUMEROPEDIDO, HORA, DATA, CP, NUMEROCADEIA, CC)
VALUES (numero_pedido.NEXTVAL, TO_TIMESTAMP('2023-05-25 19:00:00', 'YYYY-MM-DD HH24:MI:SS'), DATE '2023-05-25', 1000, 2, '87654321');
*/

